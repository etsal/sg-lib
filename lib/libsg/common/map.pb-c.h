/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: map.proto */

#ifndef PROTOBUF_C_map_2eproto__INCLUDED
#define PROTOBUF_C_map_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

typedef struct _StrmapEntryProto StrmapEntryProto;
typedef struct _StrmapProto StrmapProto;

/* --- enums --- */

/* --- messages --- */

struct _StrmapEntryProto {
	ProtobufCMessage base;
	char *first;
	char *second;
};
#define STRMAP_ENTRY_PROTO__INIT                                         \
	{                                                                \
		PROTOBUF_C_MESSAGE_INIT(&strmap_entry_proto__descriptor) \
		, NULL, NULL                                             \
	}

struct _StrmapProto {
	ProtobufCMessage base;
	size_t n_entries;
	StrmapEntryProto **entries;
};
#define STRMAP_PROTO__INIT                                         \
	{                                                          \
		PROTOBUF_C_MESSAGE_INIT(&strmap_proto__descriptor) \
		, 0, NULL                                          \
	}

/* StrmapEntryProto methods */
void strmap_entry_proto__init(StrmapEntryProto *message);
size_t strmap_entry_proto__get_packed_size(const StrmapEntryProto *message);
size_t strmap_entry_proto__pack(const StrmapEntryProto *message, uint8_t *out);
size_t strmap_entry_proto__pack_to_buffer(
    const StrmapEntryProto *message, ProtobufCBuffer *buffer);
StrmapEntryProto *strmap_entry_proto__unpack(
    ProtobufCAllocator *allocator, size_t len, const uint8_t *data);
void strmap_entry_proto__free_unpacked(
    StrmapEntryProto *message, ProtobufCAllocator *allocator);
/* StrmapProto methods */
void strmap_proto__init(StrmapProto *message);
size_t strmap_proto__get_packed_size(const StrmapProto *message);
size_t strmap_proto__pack(const StrmapProto *message, uint8_t *out);
size_t strmap_proto__pack_to_buffer(
    const StrmapProto *message, ProtobufCBuffer *buffer);
StrmapProto *strmap_proto__unpack(
    ProtobufCAllocator *allocator, size_t len, const uint8_t *data);
void strmap_proto__free_unpacked(
    StrmapProto *message, ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*StrmapEntryProto_Closure)(
    const StrmapEntryProto *message, void *closure_data);
typedef void (*StrmapProto_Closure)(
    const StrmapProto *message, void *closure_data);

/* --- services --- */

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor strmap_entry_proto__descriptor;
extern const ProtobufCMessageDescriptor strmap_proto__descriptor;

PROTOBUF_C__END_DECLS

#endif /* PROTOBUF_C_map_2eproto__INCLUDED */
