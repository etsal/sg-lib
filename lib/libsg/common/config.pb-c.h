/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: config.proto */

#ifndef PROTOBUF_C_config_2eproto__INCLUDED
#define PROTOBUF_C_config_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Host Host;
typedef struct _Config Config;


/* --- enums --- */


/* --- messages --- */

struct  _Host
{
  ProtobufCMessage base;
  char *host;
};
#define HOST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&host__descriptor) \
    , NULL }


struct  _Config
{
  ProtobufCMessage base;
  char *sealed_sg_ctx_file;
  size_t n_hosts;
  char **hosts;
};
#define CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__descriptor) \
    , NULL, 0,NULL }


/* Host methods */
void   host__init
                     (Host         *message);
size_t host__get_packed_size
                     (const Host   *message);
size_t host__pack
                     (const Host   *message,
                      uint8_t             *out);
size_t host__pack_to_buffer
                     (const Host   *message,
                      ProtobufCBuffer     *buffer);
Host *
       host__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   host__free_unpacked
                     (Host *message,
                      ProtobufCAllocator *allocator);
/* Config methods */
void   config__init
                     (Config         *message);
size_t config__get_packed_size
                     (const Config   *message);
size_t config__pack
                     (const Config   *message,
                      uint8_t             *out);
size_t config__pack_to_buffer
                     (const Config   *message,
                      ProtobufCBuffer     *buffer);
Config *
       config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__free_unpacked
                     (Config *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Host_Closure)
                 (const Host *message,
                  void *closure_data);
typedef void (*Config_Closure)
                 (const Config *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor host__descriptor;
extern const ProtobufCMessageDescriptor config__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_config_2eproto__INCLUDED */
